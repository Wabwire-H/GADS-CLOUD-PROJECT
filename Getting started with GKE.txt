##Lab: Getting Started with GKE

#Objectives

	-Provision a Kubernetes cluster using Kubernetes Engine.

	-Deploy and manage Docker containers using kubectl.

#steps

1.Set your Cloud Platform project in this session use gcloud config set project [PROJECT_ID]
	eg gcloud config set project qwiklabs-gcp-04-fd10cb096a09

2.Confirm that needed APIs are enabled;Kubernetes Engine API and Container Registry API

list the services the current project has enabled for consumption, run:
	gcloud services list --enabled
If either API is missing, enable them with the command gcloud services enable SERVICE_NAME in this case
	gcloud services enable Kubernetes Engine API
	gcloud services enable Container Registry API

3. For convenience, place the zone that Qwiklabs assigned you to into an environment variable called MY_ZONE
	export MY_ZONE=us-central1-a


4. Start a Kubernetes cluster managed by Kubernetes Engine. Name the cluster webfrontend and configure it to run 2 nodes:
	gcloud container clusters create webfrontend --zone $MY_ZONE --num-nodes 2

5. After the cluster is created, check your installed version of Kubernetes
	kubectl version

6. View your running nodes
gcloud container node-pools list --cluster=webfrontend --zone $MY_ZONE

#Run and deploy a container

1. launch a single instance of the nginx container
	kubectl create deploy nginx --image=nginx:1.17.10

2. View the pod running the nginx container
	kubectl get pods

3.Expose the nginx container to the Internet
	kubectl expose deployment nginx --port 80 --type LoadBalancer

4. View the new service:
	kubectl get services
Results a tabulated view eg
 NAME      |    TYPE       |    CLUSTER-IP  |    EXTERNAL-IP  |  PORT(S)    |      AGE
-----------|---------------|----------------|-----------------|-------------|-----------
kubernetes |   ClusterIP   |   10.51.240.1  |   <none>        |     443/TCP |       5m13s
nginx      |   LoadBalancer |  10.51.242.233 |  35.239.12.110 |    80:31981/TCP |   2m53s

5.Open a new web browser tab and paste your cluster's external IP address into the address bar.
Results: The default home page of the Nginx browser is displayed.

6. Scale up the number of pods running on your service:
	kubectl scale deployment nginx --replicas 3

7.Confirm that Kubernetes has updated the number of pods:
	kubectl get pods

8. Confirm that your external IP address has not changed:
	kubectl get services
Results: A tabulated view similar to the one above with an exact external IP address


9. Return to the web browser tab in which you viewed your cluster's external IP address. Refresh the page to confirm that the nginx web server is still responding.
Results: The default home page of the Nginx browser is displayed.